// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const SHEET_ID = '1k-pn0pQsG_DASbkJngH4yrq3qwNVaeuomm1DOBldXfw';
const BALANCE_URL = `https://opensheet.elk.sh/${SHEET_ID}/Balance`;
const PRODUCTS_URL = `https://opensheet.elk.sh/${SHEET_ID}/Prizes`;
const RECEIVED_BONUS_URL = `https://opensheet.elk.sh/${SHEET_ID}/Received Bonus`;
const LOG_URL = 'https://script.google.com/macros/s/AKfycbyTn_KsNLz8w0vjZ-gPlRNSjiN8G478OkJxURYm9VQBzTLEjmhmtqUHwTcEQWHU7umdiw/exec`;

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let balances = [];
let products = [];
let receivedLogins = [];
let firstBonusBlockedForUser = false;

// === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
fetchData();

// === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ===
async function fetchData() {
  try {
    const [balanceResp, productResp, receivedResp] = await Promise.all([
      fetch(BALANCE_URL),
      fetch(PRODUCTS_URL),
      fetch(RECEIVED_BONUS_URL)
    ]);

    const [balanceData, productData, receivedData] = await Promise.all([
      balanceResp.json(),
      productResp.json(),
      receivedResp.json()
    ]);

    balances = (Array.isArray(balanceData) ? balanceData : balanceData.values || []).map(b => ({
      login: (b.login || b.Login || '').trim(),
      points: parseInt((b.points || b['points '] || '0').toString().trim()) || 0
    }));

    products = (Array.isArray(productData) ? productData : productData.values || []).map(p => ({
      name: p.name || p.Name || '',
      points: parseInt((p.points || p.Points || '0').toString().trim()) || 0,
      image: p.image || p.Image || ''
    }));

    receivedLogins = (Array.isArray(receivedData) ? receivedData : receivedData.values || []).map(r =>
      (r.login || r.Login || '').trim().toLowerCase()
    );

    populateUsers();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
  }
}

// === –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
function populateUsers() {
  const select = document.getElementById('user');
  select.innerHTML = '';

  balances.forEach(u => {
    const opt = document.createElement('option');
    opt.value = u.login;
    opt.textContent = u.login;
    select.appendChild(opt);
  });

  const savedLogin = localStorage.getItem('selectedLogin');
  if (savedLogin && balances.some(b => b.login === savedLogin)) {
    select.value = savedLogin;
  }

  select.addEventListener('change', () => {
    localStorage.setItem('selectedLogin', select.value);
    firstBonusBlockedForUser = false;
    render();
  });

  render();
}

// === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ===
function render() {
  const login = document.getElementById('user').value;
  const balance = balances.find(b => b.login === login)?.points || 0;
  document.getElementById('balance').textContent = `–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤: ${balance}`;

  const grid = document.getElementById('products');
  grid.innerHTML = '';

  products.forEach(p => {
    const card = document.createElement('div');
    card.className = 'card';

    const isDisabled = balance < p.points;
    const isFirstBonus = p.name.toLowerCase() === '–ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å';
    const disableFirstBonus = isFirstBonus && (firstBonusBlockedForUser || receivedLogins.includes(login.toLowerCase()));

    card.innerHTML = `
      <img src="${p.image}" alt="${p.name}">
      <h3>${p.name}</h3>
      <p>${p.points} –±–∞–ª–ª–æ–≤</p>
      <button 
        class="btn"
        ${isDisabled || disableFirstBonus ? 'disabled' : ''}
        onclick="buy('${login}', '${p.name}', ${p.points}, this)">
        –ü–æ–ª—É—á–∏—Ç—å
      </button>
    `;

    grid.appendChild(card);
  });
}

// === –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–∑–∞ ===
function buy(user, item, points, btn) {
  if (btn.disabled) return;

  const userBalance = balances.find(b => b.login === user);
  if (!userBalance) return alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  if (userBalance.points < points) return alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤.');

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  userBalance.points -= points;
  firstBonusBlockedForUser = true;
  render();

  // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
  btn.disabled = true;
  btn.textContent = '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ üéâ';
  alert(`üéÅ ${item} –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —É –∫–æ–º–∞–Ω–¥—ã Research. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!`);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  fetch(`${LOG_URL}?user=${encodeURIComponent(user)}&item=${encodeURIComponent(item)}&points=${points}`)
    .catch(() => alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
}
